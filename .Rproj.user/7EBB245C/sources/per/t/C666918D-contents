require("affy", quietly = TRUE)
require("affycomp", quietly = TRUE)
require("affyPLM", quietly = TRUE)
#require("affypdnn", quietly = TRUE)
require("bioDist", quietly = TRUE)
require("simpleaffy", quietly = TRUE)
require("affyQCReport", quietly = TRUE)
require("plier", quietly = TRUE)
require("yaqcaffy", quietly = TRUE)
require("gdata", quietly = TRUE) #trim function
require("gplots", quietly = TRUE) #heatmap.2 functions
require("shiny", quietly = TRUE)
require("shinythemes", quietly = TRUE)

source("functions_imagesQC.R")
source("functions_processingQC.R")

options(shiny.maxRequestSize = 3000*1024^2)

fixUploadedFilesNames <- function(x) {
  if (is.null(x)) {
    return()
  }
  
  oldNames = x$datapath
  newNames = file.path(dirname(x$datapath),
                       x$name)
  file.rename(from = oldNames, to = newNames)
  x$datapath <- newNames
  x
}

server <- function(input, output, session) {
  
  desc <- eventReactive(eventExpr = input$DATA_UPLOAD, {
    description = NULL;
    extension<-strsplit(input$DESCFILE$datapath,"\\.")
    extension<-paste(".",extension[[1]][length(extension[[1]])],sep="")
    switch(extension,
           ".txt" = description<-trim(read.delim(file = input$DESCFILE$datapath, quote = input$QUOTE, sep = input$SEP, header = input$HEADER, fill = FALSE, as.is=TRUE )),
           ".csv" = description<-trim(read.csv(file = input$DESCFILE$datapath, quote = input$QUOTE, sep = input$SEP, header = input$HEADER, fill = FALSE, as.is=TRUE )),
           ".xls" = description<-trim(read.xls(DESCFILE, as.is=TRUE)),
           ".xlsx" =  description<-trim(read.xls(DESCFILE, as.is=TRUE))
    )
    })
  
  rawData1 <- eventReactive(eventExpr = input$DATA_UPLOAD, {
    rawData <- fixUploadedFilesNames(input$RAWDATA_UPLOAD)
    rawData <- ReadAffy(filenames = as.character(rawData$datapath))
    description <- desc()
    
    file_order <- match(description[,1],sampleNames(rawData))
    if(sum(is.na(file_order)) > 0) stop("file names in data directory and file names in description file do not match")
    if(length(unique(file_order)) < length(file_order)) stop("file names in description file are not unique")
    rawData <- rawData[,file_order]
    
    sampleNames(rawData)<- as.character(description[,2])
    return(rawData)
  })
  
  rawData <- reactive({
    addStandardCDFenv(rawData1())
  })
  
  experimentFactor <- reactive({
    description <- desc()
    experimentFactor <- factor(description[,3])
  })
  
  colList <- reactive({
    experimentFactor <- experimentFactor()
    
    #check whether a factor has been provided
    if(class(experimentFactor)!="factor") stop("Parameter 'experimentFactor' must be of class 'factor'")
    
    if(length(levels(experimentFactor))==1) {
      #if there is only one group (or no groups are provided) take equally spread colors over the rainbow palette
      plotColors <- rainbow(length(experimentFactor),s=.8,v=.7)
      #set group legend color to white, as there is not a specific group color
      legendColors <- "white"
    } else {
      #compute the number of colors needed for each class
      tab.tmp <- table(experimentFactor)
      
      #set the two extreme colors for each class
      colors.light <- rainbow(length(levels(experimentFactor)),s=1-sapply(tab.tmp,min,5)*.1)
      colors.dark <- rainbow(length(levels(experimentFactor)),v=1-sapply(tab.tmp,min,5)*.14)
      
      #create the colors to plot, and colors for the legend (average one per experimental group)
      plotColors <- NULL
      legendColors <- NULL
      for(l in 1:length(levels(experimentFactor))) {
        colorFun <- colorRampPalette(c(colors.light[l],colors.dark[l]))
        tmpColors <- colorFun(tab.tmp[l])
        plotColors[experimentFactor==levels(experimentFactor)[l]] <- tmpColors
        legendColors[l] <- tmpColors[ceiling(length(tmpColors)/2)]
      }
    }
    return(list(plotColors=plotColors,legendColors=legendColors))
  })
  
  plotColors <- reactive({
    colList()$plotColors
  })
  
  legendColors <- reactive({
    colList()$legendColors
  })
    
  plotSymbols <- reactive({
    18-as.numeric(experimentFactor())
  })
  
  legendSymbols <- reactive({
    sort(plotSymbols(), decreasing=TRUE)
  })
 
  WIDTH <- 1000
  HEIGHT <- 1414
  POINTSIZE <- 24
  MAXARRAY <- 41 
  
###########
# OUTPUTS #
###########
  output$desc <- renderTable({
    if(is.null(input$DESCFILE)) 
      return(NULL)
    desc()
    })
  output$rawdata <- renderTable({
    if(is.null(input$RAWDATA_UPLOAD)) 
      return(NULL)
    head(exprs(rawData1()))
    })
  if(FALSE){
  output$sampleprep<-renderImage({
    Data <- rawData()
    sprep=NULL
    lys=NULL
    plotColors=plotColors()
    
    if(is.null(plotColors)) stop("the 'plotColors' parameter is required")
    
    if(is.null(lys)) {
      try({calls<-detection.p.val(Data)$call
      lys<-calls[rownames(calls)[grep("lys.*3",rownames(calls), ignore.case = TRUE)],]
      rm(calls)},TRUE)
      if(is.null(lys)) {
        warning("Plots based on the detection.p.val function cannot be created for this chip type")
      }else{
        if(length(lys) > length(sampleNames(Data))) { lys<-lys[1,] }
      }
    }
    
    if(!is.null(lys) && is.null(sprep)) {
      try(yack <- yaqc(Data),TRUE) 
      if(exists("yack")) {
        spnames<-rownames(yack@morespikes[grep("(lys|phe|thr|dap).*3", # only 3' !
                                               rownames(yack@morespikes), ignore.case = TRUE),])
        sprep<-t(yack@morespikes[spnames,])
      }else {
        warning("Values based on the yaqc function cannot be computed for this chip type")
      }
    }
    
    if(!is.null(sprep) && !is.null(lys)) {
      #par(parStart)
      lmin<-min(sprep)
      lmax<-max(sprep)+50
      
      # create the plot           
      RawDataSamplePrepControl<- tempfile(fileext='.png')
      
      png(file = RawDataSamplePrepControl, width=WIDTH, height=HEIGHT, pointsize=POINTSIZE)
      if(length(sampleNames(Data)) < MAXARRAY){    
        par(mfrow=c(1,1),oma=c(13,0,0,0))
      }else{
        par(mfrow=c(1,1),oma=c(0.1,0,0,0))
      }    
      plot(c(lmin,lmax), type = 'n', ann = FALSE, axes = FALSE, 
           frame.plot = TRUE, ylim = c(lmin, lmax), xlim = c(1,5))
      
      dummy<-apply(cbind(sprep,plotColors,1:length(sampleNames(Data))),1,
                   function(x) {
                     par(new=TRUE);
                     plot(as.numeric(x[1:(length(x)-2)]),
                          type = 'b', ann=FALSE, axes=FALSE, pch='.', cex=4, lwd=2, 
                          col=x[length(x)-1], lty = as.numeric(x[length(x)]),
                          ylim=c(lmin,lmax), xlim=c(1,5))})
      
      title(main="Spike-in Sample Prep controls intensities and calls",
            ylab="Intensity",cex.lab=0.8)
      
      label3<-""
      title1<-"Intensity: OK (Lys < Phe < Thr < Dap for all arrays)"
      title2<-"\nLys Present calls: OK (all Lys are called present)"
      
      # test for Lys < Phe < Thr < Dap
      bad1 <-  colnames(t(sprep))[!(sprep[,1]<sprep[,2] 
                                    & sprep[,2]<sprep[,3] 
                                    & sprep[,3]<sprep[,4])]
      if(length(bad1)>0){    
        title1<-paste("Intensity: not OK (some array",ifelse(length(bad1)>1,"s",""),
                      " do",ifelse(length(bad1)>1,"","es")," not follow the rule Lys < Phe < Thr < Dap;",
                      "\nmaybe no Sample Prep controls were spiked on these arrays.)",sep="")
      }
      
      # test for Lys presence
      bad2 <- names(lys[lys != 'P'])
      bad2 <- gsub(".present","",bad2)
      if(length(bad2)>0){
        title2<-paste("Lys Present calls: ",length(bad2),
                      " Lys not called present",sep="")
      }
      if(length(lys[lys=='P'])==0){
        label3 <- 
          "\nApparently no Sample Prep controls were spiked on these arrays."
      } 
      
      title(xlab = c(title1,title2), cex.lab = 0.8)
      legend("topleft", paste("Lys present calls = ", 
                              length(lys[lys == "P"]),"/", length(lys),label3), bty = "n", cex=0.7)
      if(length(sampleNames(Data)) < (MAXARRAY+20)){
        cexval <- 0.65
      }else{
        cexval <- 0.45
      }         
      legend("topright", substr(sampleNames(Data),1,20), lwd=2,    
             col = plotColors, cex =cexval, bty = "n", lt = 1:length(sampleNames(Data)))
      par(cex.axis = 0.8)
      axis(2)
      axis(1, at=1:4, labels = c("Lys", "Phe", "Thr", "Dap"))
      
      if(length(bad2)>0){
        text(c(rep(0.87,length(lys[lys!='P']))),sprep[lys!='P',1],
             lys[lys!='P'], pos=4,offset=0.2, cex=0.7, col="red")
      }
      dev.off()
      
    list(src = RawDataSamplePrepControl,
         width = WIDTH,
         height = HEIGHT,
         alt = "This is alternate text")
    } else {
      warning("Spike-in sample prep plot is cannot be computed for this chip type")
    }
  },deleteFile = TRUE)
  output$ratioplot<-renderImage({
    Data <- rawData()
    experimentFactor=experimentFactor()
    plotColors=plotSymbols()
    legendColors=legendColors()
    quality=NULL
    
    if(is.null(experimentFactor)) stop("the 'experimentFactor' parameter is required")
    if(is.null(plotColors)) stop("the 'plotColors' parameter is required")
    if(is.null(legendColors)) stop("the 'legendColors' parameter is required")
    if(is.null(quality)) try(quality <- qc(Data),TRUE)
    
    if(!is.null(quality)) {  
      #par(parStart)
      
      plotFun <- function(i,j,cutoff,Cname){
        ratio35 <- quality@qc.probes[,i]/quality@qc.probes[,j]
        ratioM <- quality@qc.probes[,i]/quality@qc.probes[,i+1]
        
        cMin <- 0
        cMax <- max(max(cbind(ratio35, ratioM)) + 2, 5)
        if(Cname=="beta-actin"){
          symbol=c(17,2) # triangles for beta-actin
        }else{
          symbol=c(19,1) # circles for GAPDH (as in the simpleaffy QC report)
        }
        
        par(mfrow=c(1,2),oma=c(17,0.5,0,0.5),cex.axis=0.8)
        plot(ratio35, type='n', ann=FALSE, axes=FALSE, 
             frame.plot=TRUE, pch='.', cex=10,  ylim=c(cMin,cMax))
        rect(0, 0, length(ratio35)+1, cutoff, col=gray(0.9), border=FALSE)
        
        for (k in 0:cMax){
          abline(h=k,lty=2,col=gray(0.8))
        }
        
        par(new=TRUE)
        plot(ratio35, type='h', ann=FALSE, axes=FALSE, 
             frame.plot=TRUE, lwd=3, col=plotColors, ylim=c(cMin,cMax))
        par(new=TRUE)
        plot(ratio35,type='p', ann=FALSE, axes=FALSE, 
             frame.plot=TRUE, pch=symbol[1], col=plotColors, ylim=c(cMin,cMax))
        par(new=TRUE)
        plot(ratioM,type='p', ann=FALSE, axes=FALSE, 
             frame.plot=TRUE, pch=symbol[2], col="black", ylim=c(cMin,cMax))           
        
        title(main= paste("RNA degradation of", Cname),ylab="3'/5' and 3'/M ratios")    
        axis(2)
        par(cex.axis=0.65)
        if(length(sampleNames(Data))<(MAXARRAY/2)){ # array names not reported if more than 20 arrays
          axis(1,at=1:length(ratio35),las=2,labels=sampleNames(Data))
        }
        if(length(levels(experimentFactor))>1){
          legend("topright", levels(experimentFactor),
                 col = legendColors, fill = legendColors, bty = "n",cex = 0.55)
        }
        legend("topleft", c(paste("3\'/5\' ratio (max=", round(max(ratio35),2),")",
                                  sep=""), paste("3'/M ratio (max=", round(max(ratioM),2),")",sep="")),
               col = c(gray(0.3),"black"),pch=symbol, cex=0.55, bty = "o")
        t1 <- ratio35 <= cutoff	
        if(length(t1[t1==FALSE])>0 && length(sampleNames(Data))>=(MAXARRAY/2)){
          if(length(t1[t1==FALSE])<25){
            textlab<-sampleNames(Data)[t1==FALSE]
            legend("topleft", c(rep("",4),"Outliers, from left to right",textlab), 
                   text.col = c(rep(1,5), rep("red",length(textlab))), bty = "n",cex=0.38)  
          }else{
            mtext("Too many arrays and outliers; \nsee details on the QC table",side=1,cex=0.8,line=3)
          }
        }
        mtext(paste("Ratios should stand within the grey rectangle [0,",cutoff,"]"), 
              side=4, font=1, cex=0.7)
        
        par(cex.axis=0.8)
        boxplot(cbind(ratio35, ratioM), axes=FALSE, frame.plot=TRUE)
        title(main=paste("Boxplot of", Cname,"ratios"))    
        par(cex.lab=0.8)
        if(max(ratio35 ) < cutoff){
          title(xlab=paste(Cname," QC: OK (all 3'/5' ratios < ",cutoff,")",sep=""))
        }  else{
          title(xlab=paste(Cname," QC: not OK (some 3'/5' ratios >",cutoff,
                           ")\nNote that the threshold of ",cutoff,
                           " \nwas determined for Homo Sapiens.",sep=""), line=4)
        }       
        
        axis(1,at=1:2,labels=c("3'/5' ratio","3'/M ratio"))
        axis(2)
      }
      
      # Graph creation: beta-actin
      RawData53ratioPlot_betaActin<-tempfile(fileext = '.png')
      png(file = RawData53ratioPlot_betaActin,width=WIDTH,height=HEIGHT, pointsize=POINTSIZE)
      plotFun(1,3,3,"beta-actin")
      dev.off()
      
      list(src = RawData53ratioPlot_betaActin,
           width = WIDTH,
           height = HEIGHT,
           alt = "This is alternate text")
    } else {
      warning("3'/5' ratio plot is not computed for this chip type")
    } 
  },deleteFile = TRUE)
  output$ratioplot2<-renderImage({
    Data <- rawData()
    experimentFactor=experimentFactor()
    plotColors=plotSymbols()
    legendColors=legendColors()
    quality=NULL
    
    if(is.null(experimentFactor)) stop("the 'experimentFactor' parameter is required")
    if(is.null(plotColors)) stop("the 'plotColors' parameter is required")
    if(is.null(legendColors)) stop("the 'legendColors' parameter is required")
    if(is.null(quality)) try(quality <- qc(Data),TRUE)
    
    if(!is.null(quality)) {  
      #par(parStart)
      
      plotFun <- function(i,j,cutoff,Cname){
        ratio35 <- quality@qc.probes[,i]/quality@qc.probes[,j]
        ratioM <- quality@qc.probes[,i]/quality@qc.probes[,i+1]
        
        cMin <- 0
        cMax <- max(max(cbind(ratio35, ratioM)) + 2, 5)
        if(Cname=="beta-actin"){
          symbol=c(17,2) # triangles for beta-actin
        }else{
          symbol=c(19,1) # circles for GAPDH (as in the simpleaffy QC report)
        }
        
        par(mfrow=c(1,2),oma=c(17,0.5,0,0.5),cex.axis=0.8)
        plot(ratio35, type='n', ann=FALSE, axes=FALSE, 
             frame.plot=TRUE, pch='.', cex=10,  ylim=c(cMin,cMax))
        rect(0, 0, length(ratio35)+1, cutoff, col=gray(0.9), border=FALSE)
        
        for (k in 0:cMax){
          abline(h=k,lty=2,col=gray(0.8))
        }
        
        par(new=TRUE)
        plot(ratio35, type='h', ann=FALSE, axes=FALSE, 
             frame.plot=TRUE, lwd=3, col=plotColors, ylim=c(cMin,cMax))
        par(new=TRUE)
        plot(ratio35,type='p', ann=FALSE, axes=FALSE, 
             frame.plot=TRUE, pch=symbol[1], col=plotColors, ylim=c(cMin,cMax))
        par(new=TRUE)
        plot(ratioM,type='p', ann=FALSE, axes=FALSE, 
             frame.plot=TRUE, pch=symbol[2], col="black", ylim=c(cMin,cMax))           
        
        title(main= paste("RNA degradation of", Cname),ylab="3'/5' and 3'/M ratios")    
        axis(2)
        par(cex.axis=0.65)
        if(length(sampleNames(Data))<(MAXARRAY/2)){ # array names not reported if more than 20 arrays
          axis(1,at=1:length(ratio35),las=2,labels=sampleNames(Data))
        }
        if(length(levels(experimentFactor))>1){
          legend("topright", levels(experimentFactor),
                 col = legendColors, fill = legendColors, bty = "n",cex = 0.55)
        }
        legend("topleft", c(paste("3\'/5\' ratio (max=", round(max(ratio35),2),")",
                                  sep=""), paste("3'/M ratio (max=", round(max(ratioM),2),")",sep="")),
               col = c(gray(0.3),"black"),pch=symbol, cex=0.55, bty = "o")
        t1 <- ratio35 <= cutoff	
        if(length(t1[t1==FALSE])>0 && length(sampleNames(Data))>=(MAXARRAY/2)){
          if(length(t1[t1==FALSE])<25){
            textlab<-sampleNames(Data)[t1==FALSE]
            legend("topleft", c(rep("",4),"Outliers, from left to right",textlab), 
                   text.col = c(rep(1,5), rep("red",length(textlab))), bty = "n",cex=0.38)  
          }else{
            mtext("Too many arrays and outliers; \nsee details on the QC table",side=1,cex=0.8,line=3)
          }
        }
        mtext(paste("Ratios should stand within the grey rectangle [0,",cutoff,"]"), 
              side=4, font=1, cex=0.7)
        
        par(cex.axis=0.8)
        boxplot(cbind(ratio35, ratioM), axes=FALSE, frame.plot=TRUE)
        title(main=paste("Boxplot of", Cname,"ratios"))    
        par(cex.lab=0.8)
        if(max(ratio35 ) < cutoff){
          title(xlab=paste(Cname," QC: OK (all 3'/5' ratios < ",cutoff,")",sep=""))
        }  else{
          title(xlab=paste(Cname," QC: not OK (some 3'/5' ratios >",cutoff,
                           ")\nNote that the threshold of ",cutoff,
                           " \nwas determined for Homo Sapiens.",sep=""), line=4)
        }       
        
        axis(1,at=1:2,labels=c("3'/5' ratio","3'/M ratio"))
        axis(2)
      }
      
      # Graph creation: two separated graphs
      RawData53ratioPlotGADPH<-tempfile(fileext = '.png')
      png(file = RawData53ratioPlotGAPDH,width=WIDTH,height=HEIGHT, pointsize=POINTSIZE)  
      plotFun(4,6,1.25,"GAPDH")
      dev.off()  
      list(src = RawData53ratioPlotGADPH,
           width = WIDTH,
           height = HEIGHT,
           alt = "This is alternate text")
      
    } else {
      warning("3'/5' ratio plot is not computed for this chip type")
    } 
  },deleteFile = TRUE)
  output$rnadegplot<- renderImage({
    
    if(!isTRUE(input$rnadegplot))
      return(NULL)
    
    
    # Plot rnadeg plot
    Data <- rawData()
    Data.rnadeg=NULL
    
    RawDataRNAdegradation <- tempfile(fileext='.png')
    
    if(is.null(plotColors())) stop("the 'plotColors' parameter is required") 
    if(is.null(Data.rnadeg)) Data.rnadeg <- AffyRNAdeg(rawData())
    
    png(file = RawDataRNAdegradation, width=WIDTH, height=HEIGHT, pointsize=POINTSIZE)
    
    if(length(sampleNames(rawData()))<MAXARRAY){
      cexval <- 0.65
      par(lwd = 2, oma=c(13,0,0,0))	
    } else{
      cexval <- 0.45 
      par(lwd = 2, oma=c(0.1,0,0,0))	
    }    
    par(mar=c(4,4,4,0), cex.axis=0.6, cex.lab=0.75)
    layout(matrix(c(1,2),1,2,byrow=TRUE), c(2,1), 1, FALSE)
    plotAffyRNAdeg(Data.rnadeg, col = plotColors(), lty = 1:length(sampleNames(rawData()))) 
    par(mar=c(4,0,4,0), cex.axis=0.01, cex.lab=0.01)
    plot(1,type = 'n', ann=FALSE, axes=FALSE, frame.plot=FALSE)
    legend("topleft",sampleNames(rawData()), lwd=2, col = plotColors(), cex = cexval, bty = "n", lty = 1)
    dev.off() 
    
    # Return a list containing the filename
    list(src = RawDataRNAdegradation,
         width = WIDTH,
         height = HEIGHT,
         alt = "This is alternate text")
  }, deleteFile = TRUE)
  output$spikein<-renderImage({
    Data<-rawData()
    quality=NULL
    plotColors<-plotColors()
    
    if(is.null(plotColors)) stop("the 'plotColors' parameter is required")
    if(is.null(quality)) try(quality <- qc(Data),TRUE)
    
    if(!is.null(quality)) {
      
      RawDataSpikeinHybridControl<- tempfile(fileext='.png')

      png(file = RawDataSpikeinHybridControl,width=WIDTH,height=HEIGHT, pointsize=POINTSIZE)
      if(length(sampleNames(Data)) < MAXARRAY){    
        par(mfrow=c(1,1),oma=c(13,0,0,0))
      }else{
        par(mfrow=c(1,1),oma=c(0.1,0,0,0))
      }
      plot(c(min(quality@spikes),max(quality@spikes)),
           type = 'n', ann = FALSE, axes = FALSE, frame.plot = TRUE,
           ylim = c(min(quality@spikes), max(quality@spikes)),
           xlim = c(1,5))
      
      dummy<-apply(cbind(quality@spikes,plotColors,1:length(sampleNames(Data))),1,
                   function(x) {
                     par(new=TRUE);
                     plot(as.numeric(x[1:(length(x)-2)]),
                          type = 'b', ann=FALSE, axes=FALSE, pch='.', cex=4, lwd=2, 
                          col=x[length(x)-1], lty = as.numeric(x[length(x)]),
                          ylim=c(min(quality@spikes),max(quality@spikes)), xlim = c(1,5))})
      
      title(main = "Spike-in Hybridization controls intensities and calls",
            ylab="Intensity",cex.lab=0.8) 
      label3<-""
      title1<-"Intensities: OK (bioB < bioC < bioD < creX for all arrays)"
      title2<-"BioB Present calls: OK (indeed all bioB are called present)"
      
      # test for bioB<bioC<bioD<creX
      bad1 <- colnames(t(quality@spikes))[!(quality@spikes[,1]<quality@spikes[,2] 
                                            & quality@spikes[,2]<quality@spikes[,3] 
                                            & quality@spikes[,3]<quality@spikes[,4])]
      if(length(bad1)>0){    
        title1<-paste("Intensity: not OK (some array",ifelse(length(bad1)>1,"s",""),
                      " do",ifelse(length(bad1)>1,"","es")," not follow the rule bioB < bioC < bioD < creX)",sep="")
      }
      
      # test for bioB presence
      bad2<-gsub(".present","",names(quality@bioBCalls[quality@bioBCalls != 'P']))
      if(length(bad2)>0){
        title2<-paste("BioB present calls: not OK (",length(bad2),"/",
                      length(quality@bioBCalls)," bioB not called present)")
      }
      if(length(quality@bioBCalls[quality@bioBCalls =='P'])==0){
        label3 <- 
          "\nApparently no Hybridization controls were spiked on these arrays."
      }
      
      title(xlab = c(title1,title2), cex.lab = 0.8)
      legend("topleft", paste("bioB present calls = ", 
                              length(quality@bioBCalls[quality@bioBCalls == "P"]),"/",
                              length(quality@bioBCalls),label3), bty = "n", cex=0.7)
      
      if(length(sampleNames(Data)) < (MAXARRAY+20)){
        cexval <- 0.65
      }else{
        cexval <- 0.45
      }              
      
      legend("bottomright", substr(sampleNames(Data),1,20), lwd=2,
             col = plotColors, cex = cexval, bty = "n", lt = 1:length(sampleNames(Data)))
      par(cex.axis = 0.8) 
      axis(2)
      axis(1, at=1:4, labels = names(colnames(quality@spikes)))
      
      if(length(bad2)>0){
        text(c(rep(0.89,length(quality@bioBCalls[quality@bioBCalls!='P']))),
             quality@spikes[quality@bioBCalls!='P',1], 
             quality@bioBCalls[quality@bioBCalls!='P'], pos=4,offset=0.2, 
             cex=0.8, col="red")
      }  
      dev.off()
      
      list(src = RawDataSpikeinHybridControl,
           width = WIDTH,
           height = HEIGHT,
           alt = "This is alternate text")
    } else {
      warning("Spike-in hybridization plot is not computed for this chip type")
    }
  },deleteFile = TRUE)
  output$percentpresent<-renderImage({
    Data <- rawData()
    plotColors<-plotColors()
    experimentFactor<-experimentFactor()
    legendColors<-legendColors()
    quality <- NULL
    
    if(is.null(experimentFactor)) stop("the 'experimentFactor' parameter is required")
    if(is.null(plotColors)) stop("the 'plotColors' parameter is required")
    if(is.null(legendColors)) stop("the 'legendColors' parameter is required")
    if(is.null(quality)) try(quality <- qc(Data),TRUE)
    
    if(!is.null(quality)) {
      # Define the reference for the grey rectangle (it should minimize the number of outliers)
      ppMin <- min(quality@percent.present)
      ppMax <- max(quality@percent.present)
      ppMean<- mean(quality@percent.present)
      
      ref<-cbind(c(ppMean-5,ppMin,ppMax-10),c(ppMean+5,ppMin+10,ppMax))
      reftext<-c("[mean-5% ; mean+5%]", "[min ; min+10%]", "[max-10% ; max]")
      t1 <- (quality@percent.present >= (ppMean-5) & quality@percent.present <= (ppMean+5))
      t2 <- (quality@percent.present >= ppMin & quality@percent.present <= (ppMin+10))	
      t3 <- (quality@percent.present >= (ppMax-10) & quality@percent.present <= ppMax)	
      outliers <- c(length(t1[t1==FALSE]),length(t2[t2==FALSE]), length(t3[t3==FALSE]))
      if(outliers[1] == 0){
        ref<- ref[1,]
        reftext<- reftext[1]
      }else{
        ref<- ref[outliers==min(outliers),] # less outliers
        if(length(ref) > 3) { ref<-ref[1,] }
        reftext<- reftext[outliers==min(outliers)] # less outliers
        if(length(reftext) > 1) { reftext<-reftext[1] }		
      }
      testMin <- ref[1]
      testMax <- ref[2]
      
      RawDataPercentPresent<- tempfile(fileext='.png')
      png(file = RawDataPercentPresent,width=WIDTH,height=HEIGHT,pointsize=POINTSIZE)
      par(mfrow=c(1,2),oma=c(17,0.5,0,0.5),cex.axis=0.8)
      plot(quality@percent.present, type='n', ann=FALSE, axes=FALSE, 
           frame.plot=TRUE, pch='.', cex=10,  ylim=c(0,100))
      rect(0, testMin, length(quality@scale.factors)+1,
           testMax, col=gray(0.9), border=FALSE)
      
      for(i in seq(from=0, to=100, by=20)){
        abline(h=i,lty=2,col=gray(0.8))
      }
      abline(h=50,lty=1,col=gray(0.5))
      
      par(new=TRUE)
      plot(quality@percent.present, type='h', ann=FALSE, axes=FALSE, 
           frame.plot=TRUE, pch='.',lwd=3, col=plotColors, ylim=c(0,100))
      par(new=TRUE)
      plot(quality@percent.present,type='p', ann=FALSE, axes=FALSE, 
           frame.plot=TRUE, pch='.',cex=10, col=plotColors, ylim=c(0,100))
      
      t1 <- (quality@percent.present >= testMin & quality@percent.present <= testMax)
      if(length(t1[t1==FALSE])>0 && length(sampleNames(Data))>=(MAXARRAY/2)){
        if(length(t1[t1==FALSE])<25){
          textlab<-sampleNames(Data)[t1==FALSE]
          legend("topleft", c("Outliers, from left to right",textlab), 
                 text.col = c(1, rep("red",length(textlab))), bty = "n",cex=0.38)  	
        }else{
          mtext("Too many arrays and outliers; \nsee details on the QC table",side=1,cex=0.8,line=3)
        }			  
      }	
      
      title(main="Plot of percent present",xlab="",ylab="percentage")
      axis(2)	
      par(cex.axis=0.65)
      if(length(sampleNames(Data))<(MAXARRAY/2)){ # array names not reported if more than 20 arrays
        axis(1,at=1:length(quality@percent.present),las=2,labels=sampleNames(Data))
      }	
      
      if(length(levels(experimentFactor))>1){
        legend("topright", levels(experimentFactor),
               col = legendColors, fill = legendColors, cex = 0.55, bty = "n")
      }
      
      legend("bottomright", c(paste("min = ", round(ppMin,2), sep="" ), 
                              paste("max = ", round(ppMax,2), sep="" ), 
                              paste("max-min = ", round(ppMax-ppMin,2), sep="")), bty = "o",cex = 0.55)
      
      mtext(paste(
        "Data should be in the grey rectangle representing a spread of 10%"
        #"Data should stand within the grey rectangle",reftext
      ), 
      side=4, font=1, cex=0.7)
      par(cex.axis=0.8, cex.lab=0.8)       
      boxplot(quality@percent.present)
      title(main="Boxplot of percent present")
      if(ppMax-ppMin <= 10){
        title(xlab="Percent present QC: OK (spread <= 10%)")
      } else{
        title(xlab="Percent present QC: not OK (spread > 10%)")
      } 
      
      dev.off()
      
      list(src = RawDataPercentPresent,
           width = WIDTH,
           height = HEIGHT,
           alt = "This is alternate text")
    } else {
      warning("Percent present plot is not computed for this chip type")  
    }
  },deleteFile = TRUE)
  output$posnegcontrols<-renderImage({
    Data <- rawData()
    RawDataPosNegDistribution<- tempfile(fileext='.png')
    png(file = RawDataPosNegDistribution,width=WIDTH,height=HEIGHT,pointsize=POINTSIZE)
    par(oma=c(17,0,0,0),srt=90)  
    borderQC1(Data)
    mtext(paste("All distributions should be similar and","extreme values should not be reached\n"), side=3, cex=0.7)
    dev.off()
    list(src = RawDataPosNegDistribution,
         width = WIDTH,
         height = HEIGHT,
         alt = "This is alternate text")
  },deleteFile = TRUE)
  output$backgroundintensity<-renderImage({
    Data <- rawData
    quality<-NULL
    experimentFactor<-experimentFactor()
    plotColors=plotColors()
    legendColors=legendColors()
    
    if(is.null(experimentFactor)) stop("the 'experimentFactor' parameter is required")
    if(is.null(plotColors)) stop("the 'plotColors' parameter is required")
    if(is.null(legendColors)) stop("the 'legendColors' parameter is required")
    if(is.null(quality)) try(quality <- qc(Data),TRUE)
    
    if(!is.null(quality)) {  
      
      # Define the reference for the grey rectangle (it should minimize the number of outliers)
      bgMean<-mean(quality@average.background)
      bgMin <- min(quality@average.background)
      bgMax <- max(quality@average.background)
      ref<-cbind(c(bgMean-10,bgMin,bgMax-20),c(bgMean+10,bgMin+20,bgMax))
      reftext<-c("[mean-10 ; mean+10]", "[min ; min+20]", "[max-20 ; max]")
      t1 <- (quality@average.background >= (bgMean-10) & quality@average.background <= (bgMean+10))
      t2 <- (quality@average.background >= bgMin & quality@average.background <= (bgMin+20))	
      t3 <- (quality@average.background >= (bgMax-20) & quality@average.background <= bgMax)	
      outliers <- c(length(t1[t1==FALSE]),length(t2[t2==FALSE]), length(t3[t3==FALSE]))
      if(outliers[1] == 0){
        ref<- ref[1,]
        reftext<-reftext[1]
      }else{
        ref<- ref[outliers==min(outliers),] # less outliers
        if(length(ref) > 3) { ref<-ref[1,] }
        reftext<- reftext[outliers==min(outliers)] # less outliers
        if(length(reftext) > 1) { reftext<-reftext[1] }				
      }
      testMin <- ref[1]
      testMax <- ref[2]
      
      ylimit = c(0, max(max(quality@maximum.background), 
                        testMax)+5)
      
      RawDataBackground<- tempfile(fileext='.png')
      png(file = RawDataBackground,width=WIDTH,height=HEIGHT,pointsize=POINTSIZE)
      par(mfrow=c(1,2),oma=c(17,0.5,0,0.5),cex.axis=0.8)
      plot(c(quality@minimum.background, quality@maximum.background),
           type = 'n', ann=FALSE, axes=FALSE, frame.plot=TRUE, pch='.', cex=10, 
           xlim = c(1,length(quality@maximum.background+1)),
           ylim = ylimit)
      rect(0,testMin, 
           length(quality@average.background)+1, 
           testMax, 
           col=gray(0.8), border=TRUE, density=10, lty=6)           
      par(new=TRUE)
      plot(quality@maximum.background,
           type = 'h', ann=FALSE, axes=FALSE, frame.plot=TRUE, pch='.', lwd=3, 
           col=plotColors, ylim = ylimit)
      par(new=TRUE)
      plot(quality@minimum.background,
           type = 'h', ann=FALSE, axes=FALSE, frame.plot=TRUE, pch='.', lwd=4, 
           col='white', ylim = ylimit)        
      par(new=TRUE)
      plot(quality@maximum.background,
           type = 'p', ann=FALSE, axes=FALSE, frame.plot=TRUE, pch=6, cex=0.5,
           ylim = ylimit)
      par(new=TRUE)
      plot(quality@minimum.background,
           type = 'p', ann=FALSE, axes=FALSE, frame.plot=TRUE, pch=2, cex=0.5,
           ylim=ylimit)
      par(new=TRUE)
      plot(quality@average.background, 
           type='p', ann=FALSE, axes=FALSE, frame.plot=TRUE, pch=3, cex=1,
           ylim=ylimit)
      abline(h=testMin, col=gray(0.8), ylim=ylimit)
      abline(h=testMax, col=gray(0.8), ylim=ylimit)	
      title(main="Plot of background intensity",xlab="",ylab="background intensity")
      axis(2)
      par(cex.axis=0.65)
      if(length(sampleNames(Data))<(MAXARRAY/2)){ # array names not reported if more than 20 arrays
        axis(1,at=1:length(quality@average.background),las=2,labels=sampleNames(Data))
      }		
      if(length(levels(experimentFactor))>1){    
        legend("bottomright", c(levels(experimentFactor),"max bg","average bg", 
                                "min bg"), col = c(legendColors, 1, 1, 1), 
               pch = c(rep(15, length(legendColors)),6,3,2), bty = "n", cex=0.55)
      }else{
        legend("bottomright", c("max bg","average bg", 
                                "min bg"), col = c(1, 1, 1), pch = c(6,3,2), bty = "n", cex=0.55)    
      }
      t1 <- (quality@average.background >= testMin & quality@average.background <= testMax)
      if(length(t1[t1==FALSE])>0 && length(sampleNames(Data))>=(MAXARRAY/2)){
        if(length(t1[t1==FALSE])<25){
          textlab<-sampleNames(Data)[t1==FALSE]
          legend("bottomleft", c("Outliers, from left to right",textlab), 
                 text.col = c(1, rep("red",length(textlab))), bty = "n",cex=0.38)   
        }else{
          mtext("Too many arrays and outliers; \nsee details on the QC table",side=1,cex=0.8,line=3)
        }	 		  
      }	
      
      mtext(paste(
        "Data should be in the grey rectangle representing a spread of 20"
        #"Data should stand within the dashed grey rectangle",reftext
      ), side=4, font=1, cex=0.7)
      par(cex.axis=0.8, cex.lab=0.8)            
      boxplot(quality@average.background)
      title(main="Average background intensity")
      
      if(bgMax - bgMin <= 20){
        title(xlab="Background QC: OK (spread <= 20)")
      } else{
        title(xlab="Background QC: not OK (spread > 20)")
      }     
      
      legend("bottomleft", c(paste("min = ", round(bgMin,2), sep="" ), 
                             paste("max = ", round(bgMax,2), sep="" ), 
                             paste("max-min = ", round(bgMax-bgMin,2), sep="")), cex=0.7)        
      
      dev.off()
      
      list(src = RawDataBackground,
           width = WIDTH,
           height = HEIGHT,
           alt = "This is alternate text")
    } else {
      warning("Background intensity plot is not computed for this chip type")
    }
  },deleteFile = TRUE)
  output$scalefactors<-renderImage({
    Data <- rawData
    quality=NULL
    experimentFactor=experimentFactor()
    plotColors=plotColors()
    legendColors=legendColors()
    
    if(is.null(experimentFactor)) stop("the 'experimentFactor' parameter is required")
    if(is.null(plotColors)) stop("the 'plotColors' parameter is required")
    if(is.null(legendColors)) stop("the 'legendColors' parameter is required")
    if(is.null(quality)) try(quality <- qc(Data),TRUE)
    
    if(!is.null(quality)) {
      
      # Define the reference for the grey rectangle (it should minimize the number of outliers)
      sfMin <- min(log2(quality@scale.factors))
      sfMax <- max(log2(quality@scale.factors))
      sfMean<- mean(log2(quality@scale.factors))
      ref<-cbind(c(sfMean-1.5,sfMin,sfMax-3),c(sfMean+1.5,sfMin+3,sfMax))
      t1 <- (log2(quality@scale.factors) >= (sfMean-1.5) & log2(quality@scale.factors) <= (sfMean+1.5))
      t2 <- (log2(quality@scale.factors) >= sfMin & log2(quality@scale.factors) <= (sfMin+3))	
      t3 <- (log2(quality@scale.factors) >= (sfMax-3) & log2(quality@scale.factors) <= sfMax)	
      outliers <- c(length(t1[t1==FALSE]),length(t2[t2==FALSE]), length(t3[t3==FALSE]))
      if(outliers[1] == 0){
        ref<- ref[1,]
      }else{
        ref<- ref[outliers==min(outliers),] # less outliers
        if(length(ref) > 3) { ref<-ref[1,] }		
      }
      testMin <- ref[1]
      testMax <- ref[2]
      
      ymin <- min(-3.5, sfMin-1.5, testMin)
      ymax <- max(+3.5, sfMax+1.5, testMax) 
      ylimit <-c(ymin, ymax) 
      
      RawDataScaleFactors<- tempfile(fileext='.png')
      png(file = RawDataScaleFactors,width=WIDTH,height=HEIGHT,pointsize=POINTSIZE)
      
      par(mfrow=c(1,2), oma=c(17,0.5,0,0.5), cex.axis=0.8)
      plot(log2(quality@scale.factors), type='n', axes=FALSE, frame.plot=TRUE,
           ann=FALSE, pch='.', cex=10, ylim = ylimit)
      rect(0, testMin,
           length(quality@scale.factors)+1, 
           testMax, col=gray(0.9), border=FALSE)
      
      for(i in seq(from=ceiling(ymin), to=floor(ymax), by=1)){
        abline(h=i,lty=2,col=gray(0.8))
      }
      abline(h=0,lty=1,col=gray(0.5))
      
      par(new=TRUE)
      plot(log2(quality@scale.factors), 
           type = 'h', axes=FALSE, frame.plot=TRUE, ann=FALSE,
           pch='.', lwd=3, col=plotColors, ylim = ylimit)
      par(new=TRUE)
      plot(log2(quality@scale.factors), 
           type = 'p', axes=FALSE, frame.plot=TRUE, ann=FALSE,pch='.',
           cex=10, col=plotColors, ylim = ylimit)
      t1 <- (log2(quality@scale.factors) >= testMin & log2(quality@scale.factors) <= testMax)
      if(length(t1[t1==FALSE])>0 && length(sampleNames(Data))>=(MAXARRAY/2)){
        if(length(t1[t1==FALSE])<16){
          textlab<-sampleNames(Data)[t1==FALSE]
          legend("bottomleft", c("Outliers, from left to right",textlab), 
                 text.col = c(1, rep("red",length(textlab))), bty = "n",cex=0.38)  	
        }else{
          mtext("Too many arrays and outliers; \nsee details on the QC table",side=1,cex=0.8,line=3)
        }	 		  
      }
      
      title(main="Plot of Log scale factors", xlab="",ylab="Log2(scale factors)")
      axis(2)
      par(cex.axis=0.65)
      if(length(sampleNames(Data))<(MAXARRAY/2)){ # array names not reported if more than 20 arrays
        axis(1,at=1:length(quality@scale.factors),las=2,labels=sampleNames(Data))
      }		
      if(length(levels(experimentFactor))>1){ 
        legend("topright", levels(experimentFactor),
               col = legendColors, fill = legendColors, cex = 0.55, bty = "n")
      } 
      legend("topleft", c(paste("min = ", round(sfMin,2), sep="" ), 
                          paste("max = ", round(sfMax,2), sep="" ), 
                          paste("max - min = ",round((sfMax-sfMin),2),sep="")), bty = "n",
             cex = 0.55)
      
      mtext(paste(
        "Data should be in the grey rectangle representing 3-fold on a log scale"
      ), side=4,  font=1, cex=0.7)
      par(cex.axis=0.8)       
      boxplot(quality@scale.factors)
      title(main="Boxplot of scale factors")
      mtext("(natural scale)\n", side=3, font=1, cex=0.7)
      par(cex=0.8)
      if((sfMax - sfMin) < 3){
        
        title(xlab="Scale factors QC: OK (spread < 3-fold)")
      } else{
        title(xlab="Scale factors QC: not OK (spread > 3-fold)")
      }         
      dev.off()
      
      list(src = RawDataScaleFactors,
           width = WIDTH,
           height = HEIGHT,
           alt = "This is alternate text")
    } else {
      warning("Scale factor plot is not computed for this chip type")
    }
  },deleteFile = TRUE)
  }
  output$boxplots<-renderImage({
    Data <- rawData()
    experimentFactor <- experimentFactor()
    plotColors <- plotColors()
    legendColors <- legendColors() 
    
    if(is.null(experimentFactor)) stop("the 'experimentFactor' parameter is required")
    if(is.null(plotColors)) stop("the 'plotColors' parameter is required")
    if(is.null(legendColors)) stop("the 'legendColors' parameter is required")
    
    
    if(class(Data) == "AffyBatch") {
      Type <- "Raw"
      tmain <- "Boxplot of raw intensities"
      tmtext2 <- "Raw log intensity\n\n\n"
    } else {
      if(normMeth=="") stop("When providing a normalised data object, the normMeth parameter is required")
      Type <- "Norm"
      tmain <- paste("Boxplot after ", normMeth, sep="")
      tmtext2 <- "Normalized log intensity\n\n\n"
    }
    
    DataBoxplot<- tempfile(fileext='.png')
    png(file = paste(Type,DataBoxplot, sep=""),width=WIDTH,height=HEIGHT, pointsize=POINTSIZE)  
    par(oma=c(17,0,0,0), cex.axis=1) 
    suppressWarnings(boxplot(Data, col=plotColors ,main=tmain, axes=FALSE, pch = 20, cex=0.7))
    if(length(levels(experimentFactor))>1){ 
      legend("topright", levels(experimentFactor),
             col=legendColors,fill=legendColors, cex = 0.7, bg = "white", bty = "o")
    }
    if(length(sampleNames(Data))<MAXARRAY){
      cexval <- 0.65
    }else{
      cexval <- 0.45
    }  
    axis(1,at=1:length(sampleNames(Data)),las=2,labels=sampleNames(Data), cex.axis=cexval)        
    axis(2, cex.axis=0.7)  
    mtext(tmtext2, side=2, cex=0.8)  	   
    mtext("Distributions should be comparable between arrays\n", side=3, font=1, 
          cex=0.7)
    dev.off()
    
    list(src = DataBoxplot,
         width = WIDTH,
         height = HEIGHT,
         alt = "This is alternate text")
  },deleteFile = TRUE)
  if(FALSE){
  output$densityhistograms<-renderImage({
    Data <- rawData()
    plotColors <- plotColors()
    
    if(is.null(plotColors)) stop("the 'plotColors' parameter is required")
    
    Type <- ifelse(class(Data) == "AffyBatch","Raw","Norm")
    
    DensityHistogram<- tempfile(fileext='.png')
    png(file = paste(Type,DensityHistogram, sep=""),width=WIDTH,height=HEIGHT,pointsize=POINTSIZE)
    if(length(sampleNames(Data))<MAXARRAY){
      cexval <- 0.65
      par(oma=c(12,0,0,0) )
    }else{
      cexval <- 0.45
      par(oma=c(0.1,0,0,0) )
    }    
    if(Type == "Raw"){
      hist(Data, lwd=3, lt = 1:length(sampleNames(Data)), col = plotColors, 
           which = "both", main="Density histogram of raw intensities", cex.axis = 0.7, cex.lab=0.8)
    }else{
      if(normMeth=="") stop("When providing a normalised data object, the normMeth parameter is required")
      hist(Data, lwd=3, lt = 1:length(sampleNames(Data)), col = plotColors, 
           main=paste("Density histogram after ", normMeth,"\n", sep=""), cex.axis = 0.7, cex.lab=0.8)
    } 
    
    legend("topright", substr(sampleNames(Data),1,20), lwd=3, lt = 1:length(sampleNames(Data)),
           col = plotColors, cex = cexval, bty = "n")           
    mtext( "Curves should be comparable between arrays\n", side=3, font=1, 
           cex=0.7)
    dev.off()
    list(src = DensityHistogram,
         width = WIDTH,
         height = HEIGHT,
         alt = "This is alternate text")
  },deleteFile = TRUE)}
}
