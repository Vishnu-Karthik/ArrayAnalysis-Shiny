prefix <- "prefix rr: <http://www.w3.org/ns/r2rml#>
prefix ex: <http://example.com/ns#>
prefix map: <http://mapping.local/>
prefix sty: <http://purl.bioontology.org/ontology/STY/>
prefix sio: <http://semanticscience.org/resource/SIO_>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix ncit: <http://ncicb.nci.nih.gov/xml/owl/EVS/Thesaurus.owl#>
prefix roo: <http://www.cancerdata.org/roo/>
prefix icd: <http://purl.bioontology.org/ontology/ICD10/>
prefix skos: <http://www.w3.org/2008/05/skos#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix uo: <http://purl.obolibrary.org/obo/UO_>
prefix time: <http://www.w3.org/2006/time#>
prefix MEDDRA: <http://purl.bioontology.org/ontology/MEDDRA/>
prefix ro: <http://www.radiomics.org/RO/>"
query <- "SELECT  ?patientID   ?value ?age_at_diagnosis ?Death ?Overall_survival_days ?CT_Scan ?TstageValue ?NstageValue ?MstageValue
WHERE {
?patient a ncit:C16960.
?patient roo:P100042 ?patientID.
?patient roo:P100018 ?biologicalSex.
?biologicalSex roo:P100042 ?value.
?patient roo:P100016 ?ageatdiagnosis.
?ageatdiagnosis roo:P100042 ?age_at_diagnosis.
?patient roo:P100254 ?death.
?death roo:P100042 ?Death.
?patient roo:P100311 ?overallsurvivaldays.
?overallsurvivaldays roo:P100042 ?Overall_survival_days.
?patient roo:P100024 ?ctscan.
?ctscan roo:P100042   ?CT_Scan.
?patient roo:P100029 ?neoplasm.
?neoplasm roo:P100244 ?Tstage.
?Tstage roo:P100042 ?TstageValue.
?neoplasm roo:P100242 ?Nstage.
?Nstage roo:P100042 ?NstageValue.
?neoplasm roo:P100241 ?Mstage.
?Mstage roo:P100042 ?MstageValue.
}"
query <- paste(prefix,query)
print(query)
runApp('projects/msc/sem4/shinyapp')
runApp('abhi_app.R')
runApp('abhi_app.R')
SELECT <- "?input$patientID ?value ?age_at_diagnosis ?Death ?Overall_survival_days ?CT_Scan ?TstageValue ?NstageValue ?MstageValue
WHERE {
?patient a ncit:C16960.
?patient roo:P100042 ?patientID.
?patient roo:P100018 ?biologicalSex.
?biologicalSex roo:P100042 ?value.
?patient roo:P100016 ?ageatdiagnosis.
?ageatdiagnosis roo:P100042 ?age_at_diagnosis.
?patient roo:P100254 ?death.
?death roo:P100042 ?Death.
?patient roo:P100311 ?overallsurvivaldays.
?overallsurvivaldays roo:P100042 ?Overall_survival_days.
?patient roo:P100024 ?ctscan.
?ctscan roo:P100042   ?CT_Scan.
?patient roo:P100029 ?neoplasm.
?neoplasm roo:P100244 ?Tstage.
?Tstage roo:P100042 ?TstageValue.
?neoplasm roo:P100242 ?Nstage.
?Nstage roo:P100042 ?NstageValue.
?neoplasm roo:P100241 ?Mstage.
?Mstage roo:P100042 ?MstageValue.
}"
print(SELECT)
runApp('abhi_app.R')
runApp('abhi2.R')
runApp('abhi2.R')
runApp('abhi2.R')
runApp('abhi2.R')
runApp('abhi_app.R')
runApp('abhi_app.R')
runApp('abhi_app.R')
runApp('abhi_app.R')
runApp('abhi_app.R')
runApp('abhi_app.R')
runApp('abhi_app.R')
runApp('abhi_app.R')
runApp('abhi_app.R')
runApp('abhi_app.R')
runApp('abhi_app.R')
query <- query()
endpoint <- "http://sparql.cancerdata.org/namespace/Abhinandan_workspace/sparql"
output <- SPARQL(endpoint, query)
outputList <- output$results
outputList
runApp('abhi_app.R')
runApp('abhi_app.R')
runApp('abhi_app.R')
runApp('abhi_app.R')
runApp('abhi_app.R')
runApp('abhi_app.R')
runApp('abhi_app.R')
runApp('abhi_app.R')
runApp('abhi_app.R')
runApp('abhi_app.R')
runApp('abhi_app.R')
runApp('abhi_app.R')
runApp('abhi_app.R')
runApp('abhi_app.R')
runApp('abhi_app.R')
runApp('abhi_app.R')
runApp('abhi_app.R')
runApp('projects/msc/sem4/shinyapp')
library(limma)
shiny::runApp('projects/msc/sem4/shinyapp')
a <- matrix(1:9, nrow = 3)
a
a[,1:(length(a)-1)]
ncol(a)
a[,ncol(a)-1)]
a[,ncol(a)-1]
a[,1:ncol(a)-1]
a
a[,1:(ncol(a)-1))]
a[,1:(ncol(a)-1)]
a[,1:ncol(a)-1]
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
a <- "a"
a
nonquote(a)
a <- "1"
a
as.numeric(a)
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
m <- matrix(1:9, nrow = 3)
m
m <- matrix(cbind(c("1","1","1"),c("1","1","1"),c("1","1","1")), nrow = 3)
m
as.matrix(as.numeric(m))
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
m <- matrix(cbind(c("1","2","3"),c("1","2","3"),c("1","2","3")), ncol = 3)
m
storage.mode(m) <- "numeric"
m
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
?topTable
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
lung.expr <- read.csv(system.file("extdata","data-lung-cancer.csv", package="rWikiPathways"),stringsAsFactors = FALSE)
nrow(lung.expr)
head(lung.expr)
a <- data.frame(1:9,)
a <- matrix(1:9, nrow = 3)
a
a[,1] <- cbind(c(1,2,3))
a
a[,1] <- cbind(c("a",2,3))
a
a$4 <- cbind(c("a",2,3))
a$"4" <- cbind(c("a",2,3))
a[4] <- cbind(c("a",2,3))
a["a"] <- cbind(c("a",2,3))
data <- data.frame(x1 = 1:5,             # Create example data
x2 = letters[1:5])
data
vec <- c(1:5)
data$x3 <- vec
data
m
data$x4 <- m
m <- matrix(1:25, nrow = 5)
data$x4 <- m
data
data + m
df.insert  ()
data.insert(1, "NEW", m)
data
m
cbind(m,data)
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
m
rownames(m) <- c("a","b","c","d","a")
m
as.matrix(col) <- rownames(m)
f <- rownames(m)
f
f <- as.matrix(rownames(m))
f
cbind(f,m)
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
shiny::runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
shiny::runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
BiocManager::install("BridgeDbR")
install.packages("rJava")
shiny::runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
shiny::runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
shiny::runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
shiny::runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp()
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
shiny::runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
a <- list(c(1:10))
a
list1<-1:10
list2<-letters[1:26]
list3<-25:32
mylist<-list(list1,list2,list3)
mylist
mylist[2]
mylist[3]
mylist[,3]
mylist[1]
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
mylist
append(mylist[1],mylist[2])
as.vector(mylist)
unlist(mylist)
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
licence()
shiny::runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
5 < 6
5 <= 5
list1<-1:10
list2<-letters[1:26]
df <- as.data.frame(c(list1,list2))
df
list2
list1
df <- as.data.frame(list1,list2)
df
clear
df <- as.data.frame(cbind(list1,list2))
df
df <- as.data.frame(rbind(list1,list2))
df
for (i in list1) {for (j in list2) {print(i,j)}}
for (i in list1) {for (j in list2) {print(i)print(j)}}
for (i in list1) {for (j in list2) {print(i)}print(j)}
for (i in list1) {
print(i)
}
list1
list2
list2<-letters[1:10]
list2
df <- as.data.frame(cbind(list1,list2))
df
BIGLIST <- list(cbind(list1,list2))
BIGLIST
BIGLIST <- list(cbind(BIGLIST,BIGLIST))
BIGLIST
length(BIGLIST)
?clusterProfiler::enrichGO()
BIGLIST
BIGLIST[1]
BIGLIST[1,]
BIGLIST[[1]]
df
?mapply(function, ...)
?mapply
mapply(print(i,j), list1,list2)
mapply(print(i+j), list1,list2)
mapply(function(i,j){print(i)print(j)}, list1,list2)
mapply(function(i,j){
print(i)
print(j)
}, list1,list2)
df
mapply(function(i,j){
cat(i,j)
cat(i)
}, list1,list2)
mapply(function(i,j){
cat(j)
cat(i)
}, list1,list2)
df
mapply(function(i,j) funfun(i,j), list1,list2)
funfun <- function(i,j){
print(i)
print(j)
}
mapply(function(i,j) funfun(i,j), list1,list2)
print(i)
mapply(function(i,j) funfun(i,j), list1,list2)
list1
funfun <- function(i,j){
t <- as.vector(i)
g <- as.vector(j)
print(t)
}
mapply(function(i,j) funfun(i,j), list1,list2)
funfun <- function(i,j){
t <- i
g <- j
print(t)
print(g)
}
mapply(function(i,j) funfun(i,j), list1,list2)
funfun <- function(i,j){
t <- i
g <- j
print(t)
# print(g)
}
mapply(function(i,j) funfun(i,j), list1,list2)
funfun <- function(i,j){
t <- i
g <- j
# print(t)
print(g)
}
mapply(function(i,j) funfun(i,j), list1,list2)
funfun <- function(i,j){
print(i)
print(j)
}
mapply(function(i,j) funfun(i,j), list1,list2)
funfun <- function(i,j){
print(i)
#print(j)
}
mapply(function(i,j) funfun(i,j), list1,list2)
mylist <- list(list1,list2)
mylist
mapply(function(i,j) funfun(i,j), mylist,list2)
funfun <- function(i,j){
print(i)
print(j)
}
mapply(function(i,j) funfun(i,j), mylist,list2)
shiny::runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
shiny::runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
runApp('projects/msc/sem4/shinyapp')
mapply(sum, 1:5, 5:1)
mapply(sum, 1:5, 10:1)
mapply(sum, 1:5, 10:5)
mapply(sum, 1:5, 5:10)
mapply(sum, 1:5, 2:6)
runApp('projects/msc/sem4/shinyapp')
setwd("~/projects/msc/sem4/shinyapp/Rett_Syndrome/")
ls
source('~/projects/msc/sem4/shinyapp/Rett_Syndrome/affyAnalysisQC.R')
desc <- read.delim("desc.txt")
desc
head(normDataTable)
genes <- normDataTable[,1]
head(genes)
genes <- normDataTable$ENSG_ID
genes <- normDataTable[,2]
head(genes)
genes <- normDataTable[,1]
head(genes)
description
normDataTable <- apply(as.matrix(description[,2]),1,function(x) {
as.numeric(normDataTable[,which(colnames(normDataTable)==x)])})
rownames(normDataTable) <- genes
head(normDataTable)
if(is.null(dim(normDataTable))) {
stop("could not match array names from description file to normalized data
file")
}
designMatrix <- as.data.frame(rbind(c(1,0,-1,0),c(0,1,0,-1)))
designMatrix
descdata <- desc()
descdata <- desc
arrayNames <-descdata[,1]
arrayNames <- make.names(arrayNames)
experimentFactor
experimentFactor <- make.names(experimentFactor)
experimentFactor <- as.factor(experimentFactor)
design <- model.matrix(~ 0 + experimentFactor)
rownames(design) <- arrayNames
colnames(design) <- gsub("experimentFactor","",colnames(design))
design
fit <- lmFit(normDataTable, design = design)
library(limma)
fit <- lmFit(normDataTable, design = design)
contMatrix <- as.data.frame(rbind(c(1,0,-1,0),c(0,1,0,-1)))
contMatrix
fit <- contrasts.fit(fit, contMatrix)
contMatrix <- as.data.frame(cbind(c(1,0,-1,0),c(0,1,0,-1)))
contMatrix
fit <- contrasts.fit(fit, contMatrix)
it <- eBayes(fit)
topTable(it,number = 10, coef = 1)
tab <- topTable(it,number = Inf, coef = 1)
tab2 <- topTable(it,number = Inf, coef = 2)
head(tab)
head(tab2)
tab_sig <- rownames(tab)
tab_sig <- cbind(statData,tab)
tab_sig <- cbind(tab_sig,tab)
head(tab_sig)
tab_sig_ <- tab_sig[tab_sig$adj.P.Val < 0.05,1]
head(tab_sig_)
sig.genes <- tab_sig_
head(sig.genes)
bkgd.genes <- tab_sig[,1]
head(bkgd.genes)
library(clusterProfiler)
library(org.Hs.eg.db)
sig.genes.entrez <- clusterProfiler::bitr(sig.genes,fromType = "ENSEMBL",toType = "ENTREZID",OrgDb = org.Hs.eg.db)
head(sig.genes.entrez)
bkgd.genes.entrez <- clusterProfiler::bitr(bkgd.genes,fromType = "ENSEMBL",toType = "ENTREZID",OrgDb = org.Hs.eg.db)
head(bkgd.genes.entrez)
egobp <- clusterProfiler::enrichGO(
gene     = up.genes.entrez[[2]],
universe = bkgd.genes.entrez[[2]],
OrgDb    = org.Hs.eg.db,
ont      = "BP",
pAdjustMethod = "fdr",
pvalueCutoff = 0.05,
readable = TRUE)
egobp <- clusterProfiler::enrichGO(
gene     = sig.genes.entrez[[2]],
universe = bkgd.genes.entrez[[2]],
OrgDb    = org.Hs.eg.db,
ont      = "BP",
pAdjustMethod = "fdr",
pvalueCutoff = 0.05,
readable = TRUE)
head(egobp)
barplot(egobp, showCategory = 20)
dotplot(egobp, showCategory = 20)
emapplot(egobp, showCategory = 50)
emapplot(egobp, showCategory = 20)
goplot(egobp)
barplot(egobp, showCategory = 20)
dotplot(egobp, showCategory = 20)
library(clusterProfiler)
dotplot(egobp, showCategory = 20)
